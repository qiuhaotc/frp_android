name: Android Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g. v1.0.0) when manually dispatching'
        required: false

permissions:
  contents: write  # needed to create release

env:
  DOTNET_NOLOGO: true
  Framework: net10.0-android
  Configuration: Release
  PackageFormat: apk
  APP_PROJECT: FrpAndroid.csproj
  ANDROID_KEYSTORE_PASS: ${{ secrets.ANDROID_KEYSTORE_PASS }}
  ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
  ANDROID_KEY_ALIAS_PASS: ${{ secrets.ANDROID_KEY_ALIAS_PASS }}

jobs:
  build-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '10.0.x'

      - name: Decode keystore into project directory
        if: secrets.ANDROID_KEYSTORE_B64 != ''
        run: |
          set -e
          PROJECT_DIR="$(pwd)/src"  # FrpAndroid.csproj ËùÔÚÄ¿Â¼
          KEYSTORE_PATH="$PROJECT_DIR/android.keystore"
          echo "Decoding keystore to $KEYSTORE_PATH"
          echo "${{ secrets.ANDROID_KEYSTORE_B64 }}" | base64 -d > "$KEYSTORE_PATH"
          ls -l "$KEYSTORE_PATH"
          echo "ANDROID_KEYSTORE=$KEYSTORE_PATH" >> $GITHUB_ENV

      - name: Restore
        run: dotnet restore $APP_PROJECT

      - name: Publish APK
        run: |
          dotnet publish $APP_PROJECT \
            -c $Configuration \
            -f $Framework \
            /p:AndroidPackageFormat=$PackageFormat \
            /p:AndroidKeyStore=true \
            /p:RunAOTCompilation=false \
            $( [ -n "$ANDROID_KEYSTORE" ] && echo "/p:ANDROID_KEYSTORE=$ANDROID_KEYSTORE" ) \
            $( [ -n "$ANDROID_KEYSTORE_PASS" ] && echo "/p:ANDROID_KEYSTORE_PASS=$ANDROID_KEYSTORE_PASS" ) \
            $( [ -n "$ANDROID_KEY_ALIAS" ] && echo "/p:ANDROID_KEY_ALIAS=$ANDROID_KEY_ALIAS" ) \
            $( [ -n "$ANDROID_KEY_ALIAS_PASS" ] && echo "/p:ANDROID_KEY_ALIAS_PASS=$ANDROID_KEY_ALIAS_PASS" )

      - name: Locate artifact
        id: find_apk
        run: |
          APK=$(find . -path "*/bin/$Configuration/$Framework/publish" -type f -name '*.apk' | head -n 1)
          if [ -z "$APK" ]; then echo "No APK found"; exit 1; fi
          echo "apk=$APK" >> $GITHUB_OUTPUT
          echo "Found APK: $APK"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: frpandroid-apk
          path: ${{ steps.find_apk.outputs.apk }}
          if-no-files-found: error

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name || inputs.version }}
          name: Release ${{ github.ref_name || inputs.version }}
          draft: false
          prerelease: false
          files: ${{ steps.find_apk.outputs.apk }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
